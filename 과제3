#include <iostream>
#include <stdexcept>

template <typename T>
class SimpleVector {
private:
    T* data;          // Pointer to the dynamically allocated array
    int current_size; // Current number of elements in the vector
    int max_capacity; // Maximum capacity of the array

public:
    // Default constructor (creates an array with size 10)
    SimpleVector() : current_size(0), max_capacity(10) {
        data = new T[max_capacity];
    }

    // Constructor with custom capacity
    SimpleVector(int capacity) : current_size(0), max_capacity(capacity) {
        if (capacity <= 0) {
            throw std::invalid_argument("Capacity must be greater than 0.");
        }
        data = new T[max_capacity];
    }

    // Destructor
    ~SimpleVector() {
        delete[] data;
    }

    // Adds an element to the end of the vector
    void push_back(const T& value) {
        if (current_size < max_capacity) {
            data[current_size++] = value;
        }
    }

    // Removes the last element of the vector
    void pop_back() {
        if (current_size > 0) {
            --current_size;
        }
    }

    // Returns the number of elements in the vector
    int size() const {
        return current_size;
    }

    // Returns the capacity of the vector
    int capacity() const {
        return max_capacity;
    }
};

// Example usage
int main() {
    SimpleVector<int> vec;
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);

    std::cout << "Size: " << vec.size() << "\n";
    std::cout << "Capacity: " << vec.capacity() << "\n";

    vec.pop_back();
    std::cout << "Size after pop_back: " << vec.size() << "\n";

    return 0;
}
